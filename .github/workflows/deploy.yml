name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APPLICATION: ${{ secrets.APPLICATION }}

    permissions:
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # application.yml 설정 파일을 생성
      - name: Create application.yml
        run: |
          cd parker  # 'parker' 디렉토리로 이동
          mkdir -p ./src/main/resources/
          echo ${{ env.APPLICATION }} | base64 --decode > ./src/main/resources/application.yml

      # Gradle 실행 권한 부여
      - name: Grant execute permission to gradlew
        run: |
          cd parker  # 'parker' 디렉토리로 이동
          chmod +x ./gradlew

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: |
          cd parker  # 'parker' 디렉토리로 이동
          ./gradlew clean build -x test

      # Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker 이미지 빌드 및 Docker Hub로 푸시
      - name: Build Docker Image
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy:
    needs: build  # build Job 완료 후 실행
    runs-on: ubuntu-latest
    steps:
      # 현재 실행 중인 컨테이너가 blue 인지 green 인지 확인하여 배포할 서버 결정
      - name: Set target deployment
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.SERVER_DOMAIN }}/health-check")
          echo "Current Server Status: $STATUS"
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.SERVER_DOMAIN }}/health-check")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV

          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi

      # SSH 키를 Base64 디코딩하여 파일로 저장
      - name: Decode SSH Private Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem
          chmod 600 key.pem  # 권한 설정

      # EC2에 SSH 접속하여 새로운 Docker 컨테이너 배포
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_DOMAIN }}  # EC2 도메인
          key: ${{ secrets.EC2_SSH_KEY }}  # GitHub Secrets에서 EC2 SSH Key 불러오기
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            sudo docker-compose -f docker-compose.yml up -d ${{ env.TARGET_UPSTREAM }}

      # 배포한 컨테이너가 정상적으로 작동하는지 Health Check 수행
      - name: Health Check
        uses: jtalk/url-health-check-action@v4
        with:
          url: https://${{ secrets.SERVER_DOMAIN }}:${{ env.STOPPED_PORT }}/health-check
          max-attempts: 5  # 최대 5번까지 확인
          retry-delay: 10s  # 10초 간격으로 재시도

      # Nginx의 Upstream을 새 컨테이너로 변경 (트래픽 이동)
      - name: Update Nginx Upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_DOMAIN }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      # 이전 컨테이너 종료 및 정리
      - name: Stop Previous Container
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_DOMAIN }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{ env.CURRENT_UPSTREAM }}
            sudo docker rm ${{ env.CURRENT_UPSTREAM }}
